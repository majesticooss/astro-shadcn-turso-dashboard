---
import AutomationBuilder from "@/components/routes/automations/automation-detail";
import { AutomationHeader } from "@/components/routes/automations/automation-header";
import AuthenticatedLayout from "@/layouts/AuthenticatedLayout.astro";
import { getPageData } from "@/lib/authUtils";

const pageData = await getPageData(Astro);

if (pageData.redirect) {
	return Astro.redirect(pageData.redirect);
}

const { id } = Astro.params;
const title = "Appointment Reminder Flow";

const mockData = {
	id: "1",
	name: "Appointment Reminder Flow",
	description: "Automated reminder sequence for upcoming appointments",
	isActive: false,
	nodes: [
		{
			id: "appointment-trigger-1",
			type: "appointment-trigger",
			position: { x: 100, y: 100 },
			data: {
				label: "New Appointment",
				properties: {
					beforeTime: "24 hours",
					appointmentType: "All",
				},
			},
		},
		{
			id: "check-preference-1",
			type: "contact-preference",
			position: { x: 100, y: 250 },
			data: {
				label: "Check Contact Method",
				properties: {
					channel: "SMS",
				},
			},
		},
		{
			id: "send-sms-1",
			type: "send-sms",
			position: { x: 0, y: 400 },
			data: {
				label: "Send SMS Reminder",
				properties: {
					template: "Quick Reminder",
					message: "Reminder: You have an appointment tomorrow",
				},
			},
		},
		{
			id: "send-email-1",
			type: "send-email",
			position: { x: 200, y: 400 },
			data: {
				label: "Send Email Reminder",
				properties: {
					template: "Appointment Reminder",
					subject: "Your Upcoming Appointment",
					content:
						"This is a reminder about your appointment tomorrow.",
				},
			},
		},
	],
	edges: [
		{
			id: "e1-2",
			source: "appointment-trigger-1",
			target: "check-preference-1",
			type: "smoothstep",
			animated: true,
		},
		{
			id: "e2-3",
			source: "check-preference-1",
			target: "send-sms-1",
			type: "smoothstep",
			animated: true,
		},
		{
			id: "e2-4",
			source: "check-preference-1",
			target: "send-email-1",
			type: "smoothstep",
			animated: true,
		},
	],
};
---

<AuthenticatedLayout {...pageData} title={title}>
	<div class="flex flex-col h-full">
		<AutomationHeader
			initialIsActive={mockData.isActive}
			onToggleActive={(isActive) => {
				console.log(
					"Automation",
					isActive ? "activated" : "deactivated",
				);
				// Here you would typically update the backend
			}}
			onSave={() => {
				console.log("Saving automation...");
				// Here you would typically save the automation
			}}
			client:load
		/>
		<div class="flex-1 h-full min-h-0">
			<AutomationBuilder initialData={mockData} client:load />
		</div>
	</div>
</AuthenticatedLayout>
